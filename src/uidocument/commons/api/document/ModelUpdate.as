/* Automatically generated by IntelliJ IDEA from Java, revision needed before production use */
/*
 * Copyright (c) 2008, Vaclav Slovacek. All Rights Reserved.
 *
 * Product: UIProtocol Java
 *
 * This source-code is released under following license:
 * - no release outside i2home project is allowed
 * - this copyright notice must be placed unmodified in every file derived from this source code
 */

// @todo table, list, tree model
// @todo standard models

package uidocument.commons.api.document {

/**
 * Model update is list of properties that should be updated in the specified model with additional
 * information regarding the update process.
 */
public class ModelUpdate {

    private var id:String;
    private var variants:Vector.<Variant>;
    private var updateType:UpdateType;
    private var interpolations:Array;
    private var duration:Number;
    private var event:String;


    public function ModelUpdate(id:String):void {
        this.id = id;
        this.variants = new Vector.<Variant>();
        this.updateType = null;
        this.interpolations = new Array();
        this.duration = 0;
        this.event = null;

    }

    public function update(newModel:ModelUpdate):void {
        for (var i:Number = 0; i < newModel.getVariant().getLength(); i++) {
            this.getVariant().getProperty(0)[1] = newModel.getVariant().getProperty(0)[1];   
        }
    }

    public function getId():String {
        return id;
    }

    public function addVariant(variant:Variant):void {
        this.variants.push(variant);
    }

    /**
     * Retrieves model variant used in the interface.
     *
     * @return variant of the model update
     */
    public function getVariant():Variant {
        return variants[0];
    }


    /**
     * Retrieves update type.
     *
     * @return update type
     */
    public function getUpdateType():UpdateType {
        return null;
    }


    /**
     * Retrieves transformations classes that sould be used for animation of the model.
     *
     * @return list of transformations listed by preference
     */
    public function getInterpolations():Array {
        return null;
    }


    /**
     * Retrieves the duration of the animation is milliseconds.
     *
     * @return duration of animation in milliseconds
     */
    public function getDuration():Number {
        return 0;
    }


    /**
     * Retrieves event that is launched after the animation is complete.
     *
     * @return name of the event  to execute after the animation is finished
     */
    public function getEvent():String {
        return null;
    }

    public function toString():String {
        return id + "," + getVariant().toString();
    }

    public function getValueByName(str:String):Array {
        return variants[0].getPropertyByName(str);
    }
}
}
